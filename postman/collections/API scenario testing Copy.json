{
	"info": {
		"_postman_id": "5fee35c0-3d31-4ef5-8978-0359a9a1762c",
		"name": "API scenario testing Copy",
		"description": "# üñáÔ∏è Get started here\n\nPostman's [scripting](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) feature allows you to build conditional workflows using a collection. You can branch and loop over a set of requests.\n\nThis template contains a sample conditional workflow for testing successful user creation across a data array.\n\nThe workflow is set to run in successive iterations with different values in each iteration. If the API returns a successful response in an iteration, the next iteration is triggered, and so on. You will get a report of successful user creations when all the iterations are successful. If a user creation fails, the loop is terminated, and you will get a report of the failed attempt.\n\n<img src=\"https://content.pstmn.io/d21cb133-1e04-41f6-9ef6-9aaf85df4e82/aW1hZ2UucG5n\" alt=\"Workflow%20depicting%20the%20collection%20execution\" width=\"638\" height=\"720\">\n\nThe [postman.setNextRequest()](https://learning.postman.com/docs/postman/scripts/branching-and-looping/) function enables you to change the order of requests in a collection while testing. This function allows you to conditionally skip specific requests, repeat requests, terminate the collection early, etc. You can use conditional workflows in various use cases, from [generating a Spotify playlist](https://blog.postman.com/generate-spotify-playlists-using-a-postman-collection/) to [checking your website for broken links](https://blog.postman.com/check-for-broken-links-on-your-website-using-a-postman-collection/).\n\n## üîñ **How to use this template**\n\n**Step 1:** Open the collection and click on the \"View more actions\" icon.\n\n**Step 2:** Click \"Run Collection\" to open the [collection runner](https://learning.postman.com/docs/running-collections/intro-to-collection-runs/).\n\n**Step 3:** Click on \"Run Conditional Workflow\" to run the collection.\n\n#### Modifying the data\n\nYou can find the data array in the collection variables section, which you can navigate to by clicking on the collection's name in the sidebar and then selecting the Variables tab.\n\nThe data array follows this structure:\n\n``` json\n[\n    {\n        \"username\": \"\",\n        \"name\": \"\",\n        \"role\": \"\"\n    },\n    ...\n]\n\n ```\n\n## üí°Related templates\n\n[Async operations](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=66c7f0e5-065a-4d08-9c7e-0825e9e29e24&sourceTemplateId=78475d97-9a36-4731-ab24-9adf6a94d0fb)  \n[Data visualization](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=c9e72d75-ded7-4135-a721-5d59ddda6d59&sourceTemplateId=78475d97-9a36-4731-ab24-9adf6a94d0fb)  \n[Integration testing](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=fe506090-ca91-4340-bea9-82d2c3d2bb9a&sourceTemplateId=78475d97-9a36-4731-ab24-9adf6a94d0fb)  \n[Reusing requests and scripts](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=0cb2db53-2dee-430b-a0cf-21f1dbb50bb1&sourceTemplateId=78475d97-9a36-4731-ab24-9adf6a94d0fb)  \n[Run collection with data file](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=6a8f6393-58ab-4458-944c-7fc8f08448da&sourceTemplateId=78475d97-9a36-4731-ab24-9adf6a94d0fb)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "31562857-5fee35c0-3d31-4ef5-8978-0359a9a1762c"
	},
	"item": [
		{
			"name": "Create users based on an array of data",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const results = JSON.parse(pm.collectionVariables.get(\"results\"));",
							"const username = pm.collectionVariables.get(\"username\");",
							"",
							"if (pm.response.code === 200) {",
							"    // Mark the test as success",
							"    pm.test(`Success: ${username}`, function () {",
							"        pm.expect(pm.response.code).to.eql(200);",
							"    });",
							"",
							"    // Use the Postman Sandbox API to get more information about the response",
							"    // https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/",
							"    const response = pm.response.json();",
							"",
							"    // Add the response attributes",
							"    results.push({",
							"        success: true,",
							"        username: username,",
							"        responseAttr: response.data,",
							"        responseCode: pm.response.code",
							"    });",
							"",
							"    // Set the results in a variable",
							"    pm.collectionVariables.set(\"results\", JSON.stringify(results));",
							"",
							"    // Fetch the remaining users list and the current index from the collection variables",
							"    const idx = pm.collectionVariables.get(\"idx\");",
							"    const users = JSON.parse(pm.collectionVariables.get(\"users\"));",
							"",
							"    // Evaluate if there are any more users left to continue the loop or terminate it",
							"    if (idx < users.length) {",
							"        // Add the name of the request that you want to execute next",
							"        postman.setNextRequest(\"Create users based on an array of data\");",
							"    } else {",
							"        // Reset the index for any future runs",
							"        pm.collectionVariables.set(\"idx\", 0);",
							"        // In case, you want to end the workflow, you can also specify `null` to end the execution post this request",
							"        postman.setNextRequest(\"Report Successful User Creation\");",
							"    }",
							"}",
							"else {",
							"    pm.test(`Failure: ${username}`, function () {",
							"        pm.expect(pm.response.code).to.eql(200);",
							"    });",
							"",
							"    // Store the failure results",
							"    results.push({",
							"        success: false,",
							"        username: username,",
							"        responseCode: pm.response.code,",
							"        responseAttr: pm.response.body",
							"    });",
							"",
							"    // Reset the index for any future runs",
							"    pm.collectionVariables.set(\"idx\", 0);",
							"    // Call the failed user creation to report the results",
							"    postman.setNextRequest(\"Report Failed User Creation\");",
							"}",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Parse the data from the variables",
							"const jsonUsers = JSON.parse(pm.collectionVariables.get(\"users\"));",
							"let idx = pm.collectionVariables.get(\"idx\") || 0;",
							"",
							"if (idx < jsonUsers.length) {",
							"    // Select the first element from the array",
							"    let currentUser = jsonUsers[idx];",
							"",
							"    // Store the required information in a variable. This will be used in the request body while sending the request.",
							"    pm.collectionVariables.set(\"username\", currentUser.username);",
							"    pm.collectionVariables.set(\"name\", currentUser.name);",
							"    pm.collectionVariables.set(\"role\", currentUser.role);",
							"",
							"    // Set the active index as a variable",
							"    pm.collectionVariables.set(\"idx\", ++idx);",
							"}",
							"else {",
							"    throw new Error(\"No users left. Terminating the run.\");",
							"}",
							""
						]
					}
				}
			],
			"id": "56a14e57-3370-4291-bb5b-a3b53f75b303",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{username}}\",\n    \"name\": \"{{name}}\",\n    \"role\": \"{{role}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://postman-echo.com/post",
					"protocol": "http",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"post"
					]
				},
				"description": "This request creates a new user. It runs as many times as the number of elements in the data array.\n\nThe pre-request script sets the current user information in a variable and then uses that variable in the request body.\n\nThe test script takes care of storing the response and branching the execution based on the success of the request."
			},
			"response": []
		},
		{
			"name": "Report successful user creation",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Setting this to null would ensure that there are no other requests made after this request",
							"postman.setNextRequest(null);"
						]
					}
				}
			],
			"id": "30c5895e-48e7-4e69-b4f8-02b2bb7fc19c",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"message\": \"{{results}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{successAPIUrl}}",
					"host": [
						"{{successAPIUrl}}"
					]
				},
				"description": "If all the users were created successfully, then this request reports the successful results.\n\nYou can also use the [Slack API](https://www.postman.com/slackhq/workspace/slack-api/collection/13509546-993e3b18-d277-4189-8ce5-af45df38e336), [Twilio API](https://postman.com/twilio/workspace/twilio-api/collection/12503610-194919ce-e80b-44da-8eec-45ea8e74cdfb?ctx=documentation), or the [MessageBird API](https://www.postman.com/messagebird-official/workspace/messagebird-official/collection/7989812-9fcde03c-9cfb-4293-95ea-81f53d244e75) to get notified in case of success or failure."
			},
			"response": []
		},
		{
			"name": "Report failed user creation",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						]
					}
				}
			],
			"id": "451cfac2-bd08-480b-bc94-ca45c0ea4124",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"message\": \"{{results}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{failureAPIUrl}}",
					"host": [
						"{{failureAPIUrl}}"
					]
				},
				"description": "If there was any failure in creating a user, this request reports the failed attempt."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "ffb3c269-2722-493c-9244-54367afe7d21",
			"key": "users",
			"value": "[{\"username\": \"flash\",\"name\": \"Barry Allen\",\"role\": \"Superhero\"},{\"username\": \"wonder_woman\",\"name\": \"Diana Prince\",\"role\":\"Superhero\"},{\"username\": \"batman\",\"name\": \"Bruce Wayne\",\"role\": \"Superhero\"}]"
		},
		{
			"id": "c3e70190-b738-4514-8934-a2583653b990",
			"key": "results",
			"value": "[]",
			"type": "string"
		},
		{
			"id": "cbe35321-3b2b-47ef-92e3-405d46429a82",
			"key": "successAPIUrl",
			"value": "https://postman-echo.com/post",
			"type": "string"
		},
		{
			"id": "2aec2902-0923-4057-809b-f494aafd5fae",
			"key": "failureAPIUrl",
			"value": "https://postman-echo.com/post",
			"type": "string"
		},
		{
			"id": "3a727676-f301-4d29-8886-2a01885bcdb3",
			"key": "idx",
			"value": "0"
		},
		{
			"id": "d5b9b39f-1865-43e9-aa42-3c1b7d51a8ea",
			"key": "username",
			"value": ""
		},
		{
			"id": "a2e990b2-44d2-4c2a-8fb6-d477dee6270d",
			"key": "name",
			"value": ""
		},
		{
			"id": "0c3f4593-801d-4bee-9004-426c7352d60c",
			"key": "role",
			"value": ""
		}
	]
}